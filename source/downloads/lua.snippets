# Lua

snippet re
	require '${1}'

snippet f
	function ${1}(${2})
		${3}
	end
snippet if
	if ${1:true} then
		${2}
	end
snippet ife
	if ${1:true} then
		${2}
	else
		${3}
	end
snippet ifee
	if ${1:true} then
		${2}
	elseif ${3:false} then
		${4}
	else
		${5}
	end
snippet for
	for ${1:i} = ${2:1}, ${3:max} do
		${4}
	end
snippet fors
	for ${1:i} = ${2:1}, ${3:max}, ${4:step} do
		${5}
	end
snippet forp
	for ${1:key}, ${2:value} in pairs(${3}) do
		${4}
	end
snippet fori
	for ${1:index}, ${2:value} in ipairs(${3}) do
		${4}
	end
snippet wh
	while ${1:true} do
		${2}
	end
snippet lo
	local ${1} = ${2}
snippet pr
	print(${1})
# LÃ–VE
snippet draw
	love.graphics.draw(${1:drawable}, ${2:x}, ${3:y}, ${4:r}, ${5:sx}, ${6:sy}, ${7:ox}, ${8:oy})
snippet newimage
	love.graphics.newImage(${1:filename})
snippet circ
	love.graphics.circle(${1:mode}, ${2:x}, ${3:y}, ${4:radius}, ${5:segments})
snippet line
	love.graphics.line(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2})
snippet point
	love.graphics.point(${1:x}, ${2:y})
snippet poly
	love.graphics.polygon(${1:mode}, ${2:vertices})
snippet rect
	love.graphics.rectangle(${1:mode}, ${2:x}, ${3:y}, ${4:width}, ${5:height})
snippet print
	love.graphics.print(${1:text}, ${2:x}, ${3:y}, ${4:r}, ${5:sx}, ${6:sy})
snippet setbgcolor
	love.graphics.setBackgroundColor(${1:red}, ${2:green}, ${3:blue})
snippet setc
	love.graphics.setColor(${1:red}, ${2:green}, ${3:blue}, ${4:alpha})
snippet setfont
	love.graphics.setFont(${1:font})
# Mogamett
snippet class
	${1:} = mg.class('$1', 'Entity')
	$1:implement(mg.PhysicsBody)

	function $1:new(world, x, y, settings)
		$1.super.new(self, world, x, y, settings)
		self:physicsBodyNew(world, x, y, settings)
	end

	function $1:update(dt)
		self:physicsBodyUpdate(dt)
	end

	function $1:draw()
		self:physicsBodyDraw()
	end
snippet Class
	${1:} = mg.Class:extend('$1')

	function $1:new()

	end

	function $1:update(dt)

	end

	function $1:draw()

	end
snippet main
	require 'mogamett/mogamett'

	function love.load()
		mg.init()
	end

	function love.update(dt)
		mg.update(dt)
	end

	function love.draw()
		mg.draw()
	end

	function love.keypressed(key)
		mg.keypressed(key)
	end

	function love.keyreleased(key)
		mg.keyreleased(key)   
	end

	function love.mousepressed(x, y, button)
		mg.mousepressed(button) 
	end

	function love.mousereleased(x, y, button)
		mg.mousereleased(button) 
	end

	function love.gamepadpressed(joystick, button)
		mg.gamepadpressed(joystick, button)
	end

	function love.gamepadreleased(joystick, button)
		mg.gamepadreleased(joystick, button)
	end

	function love.gamepadaxis(joystick, axis, newvalue)
		mg.gamepadaxis(joystick, axis, newvalue)
	end

	function love.run()
		math.randomseed(os.time())
		math.random() math.random()
		if love.math then love.math.setRandomSeed(os.time()) end
		if love.event then love.event.pump() end
		if love.load then love.load(arg) end
		if love.timer then love.timer.step() end
		mg.run()
	end
